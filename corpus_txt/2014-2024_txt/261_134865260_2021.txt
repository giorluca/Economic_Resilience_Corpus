Offset-free economic mpc based on modifier adaptation: Investigation of several gradient-estimation techniques

processesArticleOffset-Free Economic MPC Based on Modifier Adaptation:Investigation of Several Gradient-Estimation TechniquesMarco Vaccari 1 , Dominique Bonvin 2 , Federico Pelagagge 1 and Gabriele Pannocchia 1,*Citation: Vaccari, M.; Bonvin, D.;Pelagagge F.; Pannocchia, G.Offset-Free Economic MPC Based onModifier Adaptation: Investigation ofSeveral Gradient-EstimationTechniques. Processes 2021, 9, 901.https://doi.org/10.3390/pr9050901Academic Editor: Leyla Özkan andAlejandro Marquez RuizReceived: 26 April 2021Accepted: 18 May 2021Published: 20 May 2021Publisher’s Note: MDPI stays neutralwith regard to jurisdictional claims inpublished maps and institutional affil-iations.Copyright: © 2021 by the authors.Licensee MDPI, Basel, Switzerland.This article is an open access articledistributed under the terms andconditions of the Creative CommonsAttribution (CC BY) license (https://creativecommons.org/licenses/by/4.0/).1 Department of Civil and Industrial Engineering, University of Pisa, Largo Lazzarino 2, 56126 Pisa, Italy;marco.vaccari@ing.unipi.it (M.V.); federico.pelagagge@phd.unipi.it (F.P.)2 Laboratoire d’Automatique, EPFL, 1015 Lausanne, Switzerland; dominique.bonvin@epfl.ch* Correspondence: gabriele.pannocchia@unipi.itAbstract: Various offset-free economic model predictive control schemes that include a disturbancemodel and the modifier-adaptation principle have been proposed in recent years. These schemesare able to reach plant optimality asymptotically even in the presence of plant–model mismatch.All schemes are affected by a major issue that is common to all modifier-adaptation formulations,namely, plant optimality (note that convergence per se does not require perfect plant gradients)requires perfect knowledge of static plant gradients, which is a piece of information not known inmost practical applications. To address this issue, we present two gradient-estimation techniques,one based on Broyden’s update and the other one on linear regression. We apply these techniquesfor the estimation of either the plant gradients or the modifiers directly. The resulting economicMPC schemes are tested in a simulation and compared on two benchmark examples of differentcomplexity with respect to both convergence speed and robustness to measurement noise.Keywords: economic model predictive control; real-time optimization; modifier adaptation; gradientestimation; Broyden’s update; linear regression1. IntroductionEconomic model predictive control (eMPC) [1] has been proposed to overcome thetraditional separation between control and optimization layers in industrial process op-erations [2,3]. eMPC merges standard MPC with the economic optimization layer thatis characteristic of real-time optimization (RTO) [2]. In particular, this combination isobtained by substituting the MPC tracking objective with economic performance [4]. Thereare many similarities between MPC and eMPC, with one of the main challenges beingoptimality under plant–model mismatch [3]. Note that the tracking-MPC (tMPC) and RTOcommunities have dealt with this challenge for many years, and two main solutions havebeen established. The first one concerns tMPC schemes and consists of augmenting thenominal model with a disturbance model so as to generate a steady-state offset correction toset-point changes [5,6]. A comprehensive review about offset-free tMPC can be found in [7].On the other hand, RTO formulations have incorporated the so-called modifier-adaptation(MA) idea [8,9]. The essence of the MA strategy is to force the KKT optimality conditionsof the modified model to match those of the plant upon convergence by using zeroth- andfirst-order correction terms [10].To handle plant–model mismatch in eMPC schemes, a methodology that combinesthe augmented model used in tMPC [7] and the MA approach used in RTO [8] was firstproposed in [11] and labeled “offset-free eMPC” (OF-eMPC). Alternative OF-eMPC for-mulations have been proposed in recent years [11–13]. These formulations can overcomeplant–model mismatch and let the controlled plant reach plant optimality upon conver-gence. This is done with the help of zeroth- and first-order modifier terms that exploitan alternative version of MA, labeled “output MA” (MAy). Instead of modifying the costfunction and the constraints as in traditional MA [8], MAy sets the modifier terms on theProcesses 2021, 9, 901. https://doi.org/10.3390/pr9050901 https://www.mdpi.com/journal/processesProcesses 2021, 9, 901 2 of 24outputs. A recent comprehensive analysis of MAy and its convergence properties can befound in [14].Despite its ability to converge to plant optimality in the presence of plant–modelmismatch, OF-eMPC suffers from a major caveat to proper MA schemes. Indeed, theseschemes require accurate knowledge of static plant gradients with respect to inputs. Thisrepresents a major challenge, especially when dealing with noisy measurements. Eventhe most recent MA investigations, which strive for feasibility improvement [15], fasterconvergence [16], applicability to periodic systems [17], or large-scale systems [18], arestill based on the assumption that the plant gradients are perfectly known. Nevertheless,several approaches for estimating plant gradients have been proposed, as detailed next.The gradient estimation techniques found in literature can be divided into twoclasses [10]. The first class, and by far the largest, includes steady-state perturbation meth-ods that rely on steady-state data (e.g., [19–21]). These methods are the ones that betterreplicate the concept of steadiness of RTO iterations. On the other hand, it might be ad-vantageous with slow processes to use transient data and estimate steady-state gradientson the go [22–24]. In this case, we speak of dynamic perturbation methods, which exhibita compromise between convergence speed and accuracy. Concretely, gradient approxi-mations are computed using either a finite-difference approach (see [10] for an overviewof available approaches) or some type of system identification [21,24,25]. Exploiting theso-called directional modifier-adaptation concept [20], recent works have shown howprivileged directions can ease gradient estimation—thereby making the approach morereactive to plant–model mismatch [26,27]—and how these directions can be computedefficiently [28]. Jeong et al. [29] recently compared the performance of different gradient es-timation methods with MA schemes. These methods include multivariate linear regression,partial least-squares regression, and principal component analysis. It is shown that the useof latent-variable space can result in fast convergence and stability near plant optimality.It is worth noting that researchers have also tried to avoid working with plant gradientestimation. Navia et al. [30] formulated a nested optimization problem, in which themodifiers are computed via gradient-free optimization in the outer loop. Although thenested implementation was proved to be robust in the presence of noisy measurementsand capable of reaching plant optimality, it was rather slow. Another modifier-estimationtechnique based on optimization has been proposed recently in [31]. In this case, thelimiting factor becomes the choice of weighting factors in the optimization problem andthe speed at which plant optimality can be reached.This paper aims at investigating alternative solutions to the gradient estimation prob-lem. In particular, we propose two main techniques to estimate static plant gradients,namely, a Broyden’s update and linear regression. Note that these techniques have alreadybeen used to estimate plant gradients and modifiers in the RTO context, but not in thecontrol context, that is, using fast sampling time and dynamic optimization. Anotherimportant advantage over our previous work [21,25] is not requiring repeated local per-turbations of the process. Moreover, taking inspiration from the aforementioned “plantgradient-free” methodologies [30,31], we also use the same two techniques to estimate themodifiers directly.This work represents an extension to [32], but it also goes further by comparing severalgradient-estimation techniques. This is important to steer future research on how MA canbest be combined with eMPC.The paper is organized as follows. The problem definition and the constituents ofOF-eMPC are detailed in Section 2. Several gradient-estimation techniques based oneither plant gradient estimation or modifier estimation are discussed in Section 3, whileSection 4 presents two OF-eMPC algorithms. The resulting OF-eMPC schemes are thencompared via a numerical example and a standard benchmark case study in Section 5.Finally, conclusions are presented in Section 6.Processes 2021, 9, 901 3 of 242. PreliminariesThe OF-eMPC algorithm described in this paper deals with a general nonlinear plantand cost. Let us detail the main concepts and techniques.2.1. Plant and Cost SpecificationsThe plant to be optimized is expressed by the following discrete-time nonlineardynamic system:x+p = fp(xp, u)yp = hp(xp),(1)where xp ∈ Rnxp , u ∈ Rnu and yp ∈ Rny are the plant states, inputs, and outputs, respec-tively; x+p are the successor states. The unknown functions fp : Rnxp ×Rnu → Rnxp andhp : Rnxp → Rny are assumed to be differentiable. The measured plant outputs yp at timek ∈ Z are noted yp,k. Furthermore, the inputs and outputs are bounded,umin ≤ u ≤ umax, ymin ≤ y ≤ ymax, (2)with umin, umax, ymin, and ymax being the corresponding lower and higher bounds.Plant (1) is said to be optimized when the known and differentiable function `e :Rny × Rnu → R is minimized. Hence, the triple (x̄?p, ū?, ȳ?p) that defines the economicoptimum equilibrium of Plant (1) can be computed as:(x̄?p, ū?, ȳ?p) = arg minx,u,y `e(y, u) (3)subject tox = fp(x, u) (4)y = hp(x) (5)umin ≤ u ≤ umax (6)ymin ≤ y ≤ ymax. (7)We introduce the following assumption about Problem (3)–(7):Assumption 1 (Plant optimality).• Problem (3)–(7) is feasible;• The triple (x̄?p, ū?, ȳ?p) is the unique solution to Problem (3)–(7).Remark 1 (Unknown plant optimum). Given that the functions fp and hp in Equation (1) aretypically unknown, the solution triple of Problem (3)–(7) is also unknown.2.2. Nominal and Augmented ModelsWe consider the following nominal process model:x+ = f (x, u)y = h(x),(8)in which x and x+ ∈ Rnx denote the current and successor states, respectively. It is assumedthat the functions f : Rnx ×Rnu → Rnx and h : Rnx → Rny are known and differentiable.Remark 2 (Plant–model mismatch). The functions f and h in Equation (8) differ from the plantfunctions fp and hp in Equation (1) due to plant–model mismatch.Augmenting Model (8) linearly with the integral states d ∈ Rnd , called disturbances,has proven to be very effective for improving the performance of tMPC under plant–modelProcesses 2021, 9, 901 4 of 24mismatch [5,6,33–35]. In the general formulation, the effects of the disturbances on thestates and outputs are modeled using the matrices Bd ∈ Rnx×nd and Cd ∈ Rny×nd :x+ = F(x, u, d) = f (x, u) + Bddd+ = dy = H(x, d) = h(x) + Cdd.(9)The resulting augmented functions F : Rnx ×Rnu ×Rnd → Rnx and H : Rnx ×Rnd → Rnyare assumed to be continuous and consistent with f and h, that is, F(x, u, 0) → f (x, u),H(x, 0)→ h(x). To guarantee that the augmented model can represent the plant withoutsteady-state offset, we introduce the following assumption (see [35] (Remark 8)):Assumption 2 (Observability). The augmented system (9) is observable.2.3. State and Disturbance EstimationAt each time step, the estimation procedure includes two steps, namely, predictionand filtering. First, using the augmented model (9), one computes the predicted values x̂k, d̂k,and ŷk asx̂k = F(x̂∗k−1, uk−1, d̂∗k−1)d̂k = d̂∗k−1ŷk = H(x̂k, d̂k),(10)where x̂∗k−1 and d̂∗k−1 are the estimates of xk−1 and dk−1 at time k− 1. Then, using outputmeasurements, these predicted values are filtered appropriately to give the estimates x̂∗k , d̂∗k ,and ŷ∗k .There are different types of estimators. For example, the so-called moving-horizonestimator (MHE) processes past output measurements in an optimization framework [36].In contrast, a Luenberger observer or Kalman filter uses only the current measurements yp,kto estimate the augmented states from their predicted values. This is the type of estimatorused in this study and is detailed next.The prediction errors at time k are expressed asεk = yp,k − ŷk (11)and used to estimate the augmented states as follows:x̂∗k = x̂k + Kxεkd̂∗k = d̂k + Kdεk.(12)Note that the matrices Kx ∈ Rnx×ny and Kd ∈ Rnd×ny must be chosen to form anasymptotically stable observer, which implies ny = nd and Kd to be invertible [5,35].2.4. Output ModifiersThe output-correction scheme adopted in this study follows the MAy formulationthat was originally developed in the RTO literature [14] and firstly applied in the eMPCframework by [11]. The correction is based on zeroth- and first-order terms that representthe steady-state deviations between plant and model outputs. In our implementation,we use the disturbance estimates d̂∗ as zeroth-order corrections. The first-order modifiermatrix at time k is noted Λk ∈ Rny×nu , with Λ0 = 0. Its evolution over time is described bythe following filtering equation:Λk = (1− σ)Λk−1 + σ(Dugp(ūk−1)−Dug(ūk−1)), (13)where σ is a scalar filter constant ∈ (0, 1], the operators Du(·) are the derivatives of theconsidered output functions (either gp or g) with respect to the inputs u, and ūk−1 areProcesses 2021, 9, 901 5 of 24the input steady-state targets computed at the previous iteration by the target calculationdescribed in the next subsection.The plant steady-state input-to-output maps gp : Rnu → Rny are unknown, andDugp(ūk−1) must be estimated experimentally from input and output measurements. Themodel steady-state input-to-output maps g : Rnu → Rny are calculated from Model (8)upon imposing the target inputs ūk−1 as follows:{x̄k−1 = f (x̄k−1, ūk−1)ȳk−1 = h(x̄k−1)=⇒ ȳk−1 = g(ūk−1). (14)Remark 3 (Model gradients). Since a linear disturbance model is used, the derivatives of Mod-els (8) and (9) with respect to u are identical.2.5. Target Calculation with ModifiersThe equilibrium triple (xk, uk, yk) at time k is calculated via steady-state optimization.The modifiers described in Section 2.4 correct the outputs so as to eliminate any first-order plant–model mismatch. The following steady-state target problem is solved ateach iteration:(x̄k, ūk, ȳk) = arg min(x,u,y)`e(y, u) (15)subject tox = F(x, u, d̂∗k ) (16)y = H(x, d̂∗k ) + Λk(u− ūk−1) (17)umin ≤ u ≤ umax (18)ymin ≤ y ≤ ymax. (19)The modifier terms Λk(u− ūk−1) in Equation (17) ensure KKT matching between Prob-lems (3)–(7) and (15)–(19) [11,14].2.6. Economic MPC with ModifiersThe finite-horizon optimal control problem (FHOCP) typical of eMPC is modifiedsimilarly to the method in Equation (17). Defining the generic state and input sequencesx := {χ0, χ1, . . . , χN} and u := {ν0, ν1, . . . , νN−1}, the optimal problem solved over N stepsat each decision time k reads(x?k , u?k ) = arg minx,uN−1∑i=0`e(γi, νi) (20)subject toχ0 = x̂∗k (21)χi+1 = F(χi, νi, d̂∗k ) (22)γi = H(χi, d̂∗k ) + Λk(νi − ūk−1) (23)umin ≤ νi ≤ umax (24)ymin ≤ γi ≤ ymax (25)χN = x̄k. (26)Assumption 3 (FHOCP).• Problem (20)–(26) is feasible• The ordered pair (x?k , u?k ) is the unique solution to Problem (20)–(26)Processes 2021, 9, 901 6 of 24The inputs implemented in the plant are the first ones of the optimal sequence u?k ,that is,uk = u?k [1]. (27)We remark that, since the modifier terms in Equations (17) and (23) serve the samegoal, for consistency purposes, the steady-state input targets used in Problem (20)–(26)are ūk−1 and not ūk. Moreover, for ensuring closed-loop stability of eMPC at nominalconditions, the following assumption is introduced:Assumption 4. Steady-state operation is assumed to be more profitable than oscillating behavior,that is, the system is dissipative with respect to the stage cost `e(·) [37].Furthermore, to be able to deal with plant–model mismatch, we also need thefollowing assumption:Assumption 5. The closed-loop control sequence generated by the FHOCP (20)–(26) converges.Note that Assumption 5 is consistent with the convergence requirements of trackingoffset-free MPC [7], modifier-adaptation schemes [9,14], and offset-free economic MPC [12].3. Gradient or Modifier EstimationThe issue limiting the practical applicability of MA methods (and thus, also of MAy), isthe need to gather appropriate information about the plant–model mismatch. In particular,it is necessary to accurately estimate the steady-state plant gradients Dugp(·) for the OF-eMPC algorithm in Section 2 to work properly. As a matter of fact, convergence to plantoptimality is only ensured with perfect gradient estimation [38].3.1. Basic IdeaThis section compares two methodologies based on steady-state perturbation methods.We also compare the performance when one uses only measurements taken at the currentiteration versus data collected at several (previous) iterations.In Section 2.4, the first-order modifiers Λk are updated at every sampling time. Thisworks fine if the plant measurements correspond to steady-state conditions; however, whendealing with transient measurements, the system must reach some sort of “steadiness”before updating Λk. For this reason, with all the methods investigated next, the modifiersare updated every M sampling times, where M ∼ τstτ is a tuning parameter, with τst beingthe time to reach steady state and τ being the sampling time. This way, we let the sys-tem reach quasi-stationary conditions between two successive modifier updates, therebysatisfying the necessity of operating with (near) steady-state measurements. This impliesa time-scale separation between the control and gradient-estimation tasks. Since Λk isupdated recursively, it helps to start the recursion with a fair estimate of Λ. In this initial-ization phase, we apply nu appropriate input perturbations and collect quasi-stationaryoutput measurements, with which we can construct an initial nonzero Λ0. The next twosubsections will address plant gradient estimation and modifier adaptation, respectively.3.2. Plant Gradient EstimationWe propose two techniques for the estimation of plant output gradients.3.2.1. Broyden’s Update for Plant Gradient EstimationBroyden’s update offers a recursive way of updating the estimated gradients usingcurrent and past measurements [10,39,40]. The advantage of Broyden’s update is that itdoes not require additional perturbations; however, being a numerical method, sufficientvariation between two consecutive inputs is needed for the scheme not to fail. The techniqueis a standard secant method in nonlinear programming for updating estimates of first-orderderivatives, such as Jacobian matrices [41].Processes 2021, 9, 901 7 of 24At the kth iteration, Dugp,k, which are estimates of Dugp(ūk−1), are updated by defining∆Yk := yp,k − yp,k−M (28)∆Uk :=uk−1 − uk−M−1 (29)and using Broyden’s formula as follows:Dugp,k = Dugp,k−M +∆Yk −Dugp,k−M∆Uk∆UTk ∆Uk∆UTk . (30)The gradients of the model output functions g(·) can be computed from their defini-tion (14) using the implicit function theorem:Dug(·) = Dxh(x)[(I −Dx f (x, u))−1Du f (x, u)]. (31)Then, the gradient differences are calculated as follows:∆gk = Dugp,k −Dugk. (32)When applying Equation (30), care must be taken to avoid ill-conditioning when∆Uk → 0. Hence, the step given by Equation (30) is performed only if ‖∆Uk‖ ≥ ρu, whereρu is a chosen threshold.3.2.2. Linear Regression for Plant Gradient EstimationThis method relies on output measurements at ns + 1 steady-state operating pointscorresponding to the inputs uk, uk−M, . . . , uk−ns M, with ns ≥ nu. Using such a data set, theplant output gradients are computed as linear interpolation if nu = ns or linear regressionif ns > nu. These gradients are often called simplex gradients [42]. A similar approachis used in [43]. In the present work, we use ns past points, with ns > nu, to estimate thenu-dimensional gradients since the resulting redundancy helps deal with measurementnoise [20].Hence, at the kth iteration, we set nsk = min{ns, kM − 1}to construct thefollowing matrices:Uk =[uk − uk−M . . . uk − uk−nsk M]∈ Rnu×nsk (33)Yp,k =[yp,k − yp,k−M . . . yp,k − yp,k−nsk M]∈ Rny×nsk . (34)The length of the sets Uk and Yp,k increases at each iteration from nu, when only nu + 1operation points are available, to ns. DefiningYp,k = Dugp,k Uk, (35)the simplex gradients are computed as the least-squares solution to Equation (35):Dugp,k = Yp,k U †k = Yp,k UTk (UkUTk )−1. (36)The matrix U †k in Equation (36) can be poorly conditioned if the successive pointsdo not extend in all directions of the input space [42]. This ill-conditioning can lead toerroneous gradient estimates; hence, as with Broyden’s update, Step (36) is performed onlyif ‖Uk‖1 ≥ ρu. Then, the gradient differences are calculated as in (32).3.3. Modifier EstimationIn this section, we propose to use the two techniques developed in Section 3.2 toestimate the differences between the plant and model gradients directly, that is, ∆gk. Infact, direct estimation of modifiers is often preferred over the estimation of the individualProcesses 2021, 9, 901 8 of 24gradients since the plant and the model are approximated using the same numerical scheme.A graphical explanation can be derived similarly to the one made for linear interpolationin [10, Figure 3], but this is beyond the scope of the present paper.3.3.1. Broyden’s Update for Modifier EstimationAnalogously to Section 3.2.1, we define the following quantities:δyk := yp,k − h(x̂k) (37)∆Ek := δyk − δyk−M, (38)which leads to Broyden’s update:∆gk = ∆gk−M +∆Ek − ∆gk−M∆Uk∆UTk ∆Uk∆UTk . (39)It should be noted that when applying Equation (39), the same issue mentioned forEquation (30) of avoiding ill-conditioning must be considered.3.3.2. Linear Regression for Modifier EstimationAnalogously to Equation (34), at the kth iteration, we construct the following matrix:∆Ek =[δyk − δyk−M . . . δyk − δyk−nsk M]∈ Rny×nsk , (40)with δyk defined in Equation (37). The matrix of differences between plant and modelgradients is computed as the least-squares solution to the following regression problem:∆Ek = Dugp,k Uk −Dugk Uk = ∆gk Uk, (41)for which the solution is∆gk = ∆Ek U †k = ∆Ek UTk (Uk UTk )−1. (42)As above, we need to consider the ill-conditioning problem occurring when Uk → 0.3.4. Role of Disturbance ModelThe role played by the disturbance model is not the same for plant gradient estimationand modifier estimation. This issue is discussed next.3.4.1. Plant Gradient EstimationIn the case of plant gradient estimation, the computation of Dugp,k in Equation (30)or Equation (36) depends on the disturbance model that has been selected:• Using a linear disturbance model, as in (9), implies an equivalence between the nominaland augmented models for computing Dug(·), as in (31), since the disturbances dwould not appear in any of the derivatives involved, that is, DxF(·), Dx H(·), andDuF(·). Hence, the disturbance variables are not involved in the gradient calculation.• In contrast, using a nonlinear disturbance model, it would not be possible to discard thedisturbance variables when calculating gradients. Moreover, a nonlinear disturbancemodel may be more challenging to implement; however, if implemented correctly, thefirst-order modifier terms might become superfluous (see [11] for an example).Hence, in the case of plant gradient estimation, the most straightforward option is towork with a linear disturbance model and use first-order modifiers.3.4.2. Modifier EstimationThe driving terms ∆Ek in Broyden’s update (39) and ∆Ek in the linear regressionupdate (42) use the output errors δyk (the differences between the plant and nominalProcesses 2021, 9, 901 9 of 24model outputs) in place of the prediction errors εk (the differences between the plant andaugmented model outputs). As a matter of fact, using∆Ek = εk − εk−M =(yp,k − H(x̂k, d̂k))−(yp,k−M − H(x̂k−M, d̂k−M))(43)or∆Ek =[εk − εk−M . . . εk − εk−nsk M]∈ Rny×nsk (44)to compute ∆gk in Equation (39) or Equation (42) would not work. The implicit secantequation behind the Broyden update, namely, εk − εk−M = ∆gk∆Uk, does not hold truebecause d̂k 6= d̂k−M. The same problem appears when dealing with the linear regressionupdate and Equation (41). Hence, the nominal model (8) is used for estimation, while theaugmented model (9) is used for optimization to ensure convergence.4. Offset-Free Economic MPC AlgorithmsThis sections formulates algorithmically the two OF-eMPC schemes based on Broy-den’s update and linear regression. The way the algorithms are initialized is presented first.4.1. Algorithm InitializationTo improve convergence speed, the OF-eMPC schemes require a good initial estimatefor ∆g, which translates into an appropriate Λ0. This can be achieved by perturbing eachinput individually around the current operating point and calculating the correspondinggradient elements, which requires nu input perturbations. Following each perturbation,one must wait M sampling times for the system to approach a steady state.Next, we detail this initialization phase. Let k0 denote the iteration at which the plantfirst reaches steady state, with the inputs uk0 . The following control law is then used duringthe initialization phase, for j = 1, . . . , nu:uk = uk0 + sjej for (j− 1)M ≤ k− k0 < jM, (45)where sj is the amplitude of a step of duration M in the direction ej, with ej being a unitvector in input space. One sees that the jth component of u is perturbed individuallyby the amount of sjej during M iterations. The initialization phase ends at iterationk f := k0 + nu M.The jth column of the plant gradient to be used in Equation (30) is estimated asDugp,k f ,j =yp,k0+jM − yp,k0sj, (46)while the jth column of the gradient differences to be used in Equation (39) is∆gk f ,j =(yp,k0+jM − yp,k0)−(h(x̂k0+jM)− h(x̂k0))sj. (47)Note that, unlike Broyden’s update, the linear regression method in Equation (36) orin Equation (42) does not require Jacobian initialization, albeit the initialization phase isstill used.These estimated plant gradients or gradient differences are used to compute Λkas follows:Λk =0 for k0 < k < k f (initialization phase) (48)Λk−1 if mod (k− k f , M) 6= 0 k > k f (49)(1− σ)Λk−1 + σ∆gk if mod (k− k f , M) = 0 k ≥ k f . (50)Processes 2021, 9, 901 10 of 244.2. OF-eMPC Algorithm Using Broyden’s UpdateThe block diagram and algorithm describing the OF-eMPC scheme with Broyden’supdate are given in Figure 1 and Algorithm 1. For the sake of brevity, the initializationphase is not shown, and only the behavior for k > k f is displayed.As can be seen in Figure 1, gradient estimates are computed after k0 + nu M iterations.The modifier matrix is updated every M time steps, but only when the difference betweentwo successive inputs is not too close to zero. This is needed to avoid calculating gradientdifferences based on little informative data, that is, to avoid ill-conditioning of the updatingEquation (30) or Equation (39). Hence, the parameter ρu can be seen as a tuning parameterfor the performance of the gradient estimation method.FHOCP (20–26,27) k→ k− 1ukPlantyp,kuk−1Predictionmodule (10)uk−1Filteringmodule (11,12)x̂k, d̂k, ŷkAugmentedstateestimatormod (k − k f , M) = 0x̂∗k , d̂∗k‖∆Uk‖ ≥ ρuPGE is TrueGradientestimation (30)Gradientdifferenceevaluation (32)YESYESYESDugp,kGradientdifferenceestimation (39)NOModifierupdate (50)∆gk∆gkTargetoptimizationproblem (15)–(19)x̄k, ūkΛkNOΛk = Λk−1NOΛk = Λk−1Figure 1. Block diagram for the eMPC algorithm described in Sections 2, 3.2.1, and 3.3.1 usingBroyden’s update formula, for k > k f . The acronym PGE stands for Plant Gradient Estimation.Processes 2021, 9, 901 11 of 24Algorithm 1 Offset-free eMPC algorithm using Broyden’s update.1: Set k = k f and initialize uk using current plant values, x̂∗k , d̂∗k from (12) and Λk from (50),with Λk−1 = 0.2: Inject inputs uk into plant and wait for next sampling instant.3: Update time index k := k + 1.4: Read yp,k from plant.5: Predict successor quantities using (10).6: Evaluate prediction errors using (11).7: Estimate states and disturbances using (12).8: if mod (k− k f , M) = 0 then9: if Plant Gradient Estimation is True then10: Define ∆Uk and ∆Yk as in (29) and (28).11: else12: Define ∆Uk and ∆Ek as in (29) and (38).13: end if14: if ‖∆Uk‖ ≥ ρu then15: if Plant Gradient Estimation is True then16: Evaluate plant gradients using (30).17: Evaluate gradient differences using (32).18: else19: Evaluate gradient differences using (39).20: end if21: Update modifier matrix using (50).22: else23: Do not update modifier matrix.24: end if25: else26: Do not update modifier matrix.27: end if28: Solve (15)–(19) to obtain targets (x̄k, ūk, ȳk).29: Solve FHOCP (20)–(26), set inputs uk as per (27).30: Output: uk, x̂∗k , d̂∗k , and Λk.31: Goto 2.4.3. OF-eMPC Algorithm Using Linear RegressionThe block diagram and algorithm describing the OF-eMPC scheme that uses linearregression are given in Figure 2 and Algorithm 2. Here, the initialization phase is notshown, and only the behavior for k > k f is displayed.Processes 2021, 9, 901 12 of 24FHOCP (20–26,27) k→ k− 1ukPlantyp,kuk−1Predictionmodule (10)uk−1Filteringmodule (11,12)x̂k, d̂k, ŷkAugmentedstateestimatormod (k − k f , M) = 0x̂∗k , d̂∗kInput datacollection (33)PGE is TrueOutput datacollection (34)Output differencecollection (40)‖Uk‖1 ≥ ρuGradientdifferenceestimation (42)NO‖Uk‖1 ≥ ρuGradientestimation (36)Gradientdifferenceevaluation (32)YESUk,YkYESDugp,kYESYESUk, EkModifier up-date (50)∆gk∆gkTargetoptimizationproblem (15)–(19)x̄k, ūkΛkNOΛk = Λk−1uk−1NOΛk = Λk−1yp,kyp,kFigure 2. Block diagram for the eMPC algorithm described in Sections 2, 3.2.2, and 3.3.2 using thelinear regression solution, for k > k f . The acronym PGE stands for Plant Gradient Estimation.Processes 2021, 9, 901 13 of 24Algorithm 2 Offset-free eMPC algorithm using linear regression1: Set k = k f and initialize uk using current plant values, x̂∗k , d̂∗k from (12) and Λk from (50),with Λk−1 = 0.2: Inject inputs uk into plant and wait for next sampling instant.3: Update time index k := k + 1.4: Read yp,k from plant.5: Predict successor quantities using (10).6: Evaluate prediction errors using (11).7: Estimate states and disturbances using (12).8: if mod (k− k f , M) = 0 then9: Update input matrix Uk as in (33).10: if Plant gradient estimation is True then11: Update output matrix Yk as in (34).12: else13: Update output difference matrix Ek as in (40).14: end if15: if ‖Uk‖1 ≥ ρu then16: if Plant gradient estimation is True then17: Evaluate plant gradients using (36)18: Evaluate gradient differences using (32).19: else20: Evaluate gradient differences using (42).21: end if22: Update modifier matrix using (50).23: else24: Do not update modifier matrix.25: end if26: else27: Do not update modifier matrix.28: end if29: Solve (15)–(19) to obtain targets (x̄k, ūk, ȳk).30: Solve FHOCP (20)–(26), set inputs uk as in (27).31: Output: uk, x̂∗k , d̂∗k , and Λk.32: Goto 2.4.4. Ill-ConditioningIll-conditioning of ∆gk in Equations (30), (36), (39), or (36) results from too small avalue of ∆Uk or Uk. When ∆Uk or Uk tends to zero, the aforementioned ∆gk can no longerbe calculated. This happens when two measurements corresponding to (almost) the samesteady state are used in ∆Uk or Uk, that is, with uk−1 u uk−M−1. Hence, before calculating∆gk, we compare the value of ∆Uk or Uk with the threshold value ρu, which depends onthe input–output sensitivity and the size of measurement noise. This is an engineeringchoice that the designer has to make based on the process at hand.We underline that, if modifier update does not take place due to ill-conditioning, andthus the previous values of the gradients or modifiers are used, Problems (15) and (20) arestill solved as part of OF-eMPC. On the other hand, if the inputs u get “stuck” far awayfrom plant optimality, the system requires additional excitation for accurate estimation ofplant gradients or modifiers.Processes 2021, 9, 901 14 of 245. Simulation ResultsTwo examples taken from the literature are used to compare the performance of fiveeMPC schemes, all using the same nominal model, cost function, and sampling time. Thereis significant plant–model mismatch, and the augmented model (9) readsx+ = f (x, u)d+ = dy = h(x) + d.(51)The estimator of Section 2.3 is the deadbeat Kalman filter with the parameters Kx = 0and Kd = I. In addition, all eMPC controllers use the target calculation (15) and theFHOCP (20). The five controllers are the following:1. eMPC0 assumes the plant gradients to be perfectly known, i.e., Dugp,k = Dugp(ūk−1).This controller is not practically implementable but is used as reference.2. eMPC1 uses the Broyden’s gradient update described in Section 3.2.1.3. eMPC2 estimates the plant gradient using linear regression as per Section 3.2.2. Thenumber of data points in the regression is ns = 4.4. eMPC3 uses the Broyden’s modifier update described in Section 3.3.1.5. eMPC4 estimates the modifiers using linear regression as per Section 3.3.2. Thenumber of data points in the regression is also ns = 4.Note that, in the presence of plant–model mismatch, the use of the disturbancemodel (51) by itself is not sufficient to eliminate offset, as reaching plant optimality requiresperfect knowledge of plant gradients [25,32]. When not otherwise specified, M = 15is chosen for all controllers. Moreover, the filter constant for updating the modifiers inEquation (13) is σ = 0.5, and the tolerance threshold for avoiding numerical ill-conditioningis ρu = 5 · 10−4.5.1. CSTR with Competitive ReactionsThe first example is a continuous stirred-tank reactor (CSTR), in which two consecutivereactions take place:Ak1−→ B k2−→ C. (52)The objective is to maximize the profit expressed as the difference between the rev-enues generated by the desired product B and the cost of the raw material A. The followingsystem of ordinary differential equations describes the reactor dynamics:ẋ1 = uV (cA0 − x1)− k1x1ẋ2 = uV (cB0 − x2) + k1x1 − k2x2,(53)where x1 and x2 represent the molar concentrations of A and B in the reactor, the cor-responding feed concentrations are cA0 and cB0, and the input u is the feed flow rateregulated through a valve. For the sake of simplicity, the reactor is assumed to have aconstant volume V and to be isothermal. Both states are assumed to be measured. Thereactor parameters are taken from [25]. Optimal steady-state performance is computed bysolving the following optimization problem:maxu,xp(u, x) (54)Processes 2021, 9, 901 15 of 24subject touV(cA0 − x1)− k1x1 = 0 (55)uV(cB0 − x2) + k1x1 − k2x2 = 0 (56)0 ≤ x1 ≤ cA0 (57)0 ≤ x2 ≤ cA0, (58)with the running profitp(u, x) = βBu x2 − βAu cA0 . (59)Optimal operation corresponds to u?s = 1.043 m3/min, x?1,s = 0.511 kmol/m3, andx?2,s = 0.467 kmol/m3 with the maximal profit p(u?, x?) = 0.906 e/min.5.1.1. ModelWe assume plant–model mismatch and design the controller with erroneous values ofthe two kinetic parameters: the model values known by the controller are k̃1 = 0.5 min−1and k̃2 = 0.4 min−1, meaning that, compared to the true values k1 = 1.0 min−1 andk2 = 0.05 min−1, the first reaction rate is underestimated, while the second one is overesti-mated. The economic cost function to be minimized in Problem (20) is`e(y(ti), u(ti)) = −∫ ti+τtip(u(t), y2(t))dt =∫ ti+τti[βAu(t)cA0 − βBu(t)y2(t)]dt, (60)with the sampling time τ = 0.25 min. Furthermore, the dynamics (53) is discretized usingan implicit Euler method and the initial conditions are x1,0 = x2,0 = 0.1 kmol/m3. Notethat, with τst ' 4 min, the choice M = 15 is quite appropriate.5.1.2. Reactor PerformanceThe input and the cost function of the reactor with the five aforementioned controllersare depicted in Figure 3. We can immediately see that all schemes reach plant optimalityeven under the presence of plant–model mismatch. Before reaching the initialization phaseat t = 3.75 min, the behavior is the same for the practical controllers eMPC1–eMPC4 asthey all use the disturbance model (51) and no first-order correction. eMPC0 is, of course,significantly better as it uses perfect knowledge of plant gradients. Λk is updated for thefirst time at time step k f = k0 + nu M = 30, which corresponds to t = 7.5 min. Afterinitialization, we see a slight difference between the schemes that use Broyden’s update(eMPC1 and eMPC3) and those that rely on linear regression (eMPC2 and eMPC4). Allof them start to move towards plant optimality, with the methodologies using Broyden’supdate reaching steady state faster. We observe a steplike profile, since the corrections areupdated every M time samples. The average convergence time for the proposed methodsis about 40 min.To speed up convergence, one can reduce the value of M, thereby looking for acompromise between convergence speed and steadiness of the collected samples. Figure 4shows the reactor performance with the five controllers when M has been reduced from 15to 5. For the sake of comparison, the same initial steady state was used, that is, we havek0 = 15 and k f = 20, with t = 5 min being the first time that Λk is updated. All schemesreach plant optimality in about half the time of the previous case. Note also that, withall schemes, the profit (bottom panel of Figure 4) quickly reaches plant optimality. OnlyeMPC3 presents some erratic behavior that could result from poor numerical conditioningwhen Broyden’s update is used on the gradient difference. However, adjusting the filteringparameter α can improve the situation.Processes 2021, 9, 901 16 of 240 20 40 60 80 1000.40.60.81.01.21.41.61.8 Q(m3 /min)eMPC0eMPC1eMPC2eMPC3eMPC4Opt. Eq.0 20 40 60 80 100Time (min)−0.6−0.4−0.20.00.20.40.60.8 Profit(€/min)eMPC0eMPC1eMPC2eMPC3eMPC4Opt. Eq.Figure 3. Reactor performance with five controllers and M = 15: input (top) and profit (bottom).The dotted vertical lines depict the time interval [3.75–7.5] min used for Λ-initialization.Processes 2021, 9, 901 17 of 240 20 40 60 80 1000.40.60.81.01.21.41.61.82.0 Q(m3 /min)eMPC0eMPC1eMPC2eMPC3eMPC4Opt. Eq.0 20 40 60 80 100Time (min)−0.50−0.250.000.250.500.751.00 Profit(€/min)eMPC0eMPC1eMPC2eMPC3eMPC4Opt. Eq.Figure 4. Reactor performance with five controllers and M = 5: input (top) and profit (bottom). Thedotted vertical lines depict the time interval [3.75–5] min used for Λ-initialization.5.2. Williams–Otto Reactor5.2.1. ProcessAs a well-known RTO example [10,44], the Williams–Otto reactor is a nonisothermalCSTR, in which three reactions take place:A + Bk1−→ C r1 = k1(Tr)cAcBB + Ck2−→ P + E r2 = k2(Tr)cBcCC + Pk3−→ G r3 = k3(Tr)cCcP.(61)The reactor feed consists of two components: Species A fed at the constant flow rateQA with molar concentration cA0, and Species B added at the variable flow rate QB withmolar concentration cB0. The desired products are P and E, while C and G are intermediateand undesired products, respectively. The reactor outlet flow rate Qr is set equal to thesum of the two inlet flow rates, that is, Qr = QA + QB, with the reactor volume V beingconstant. Mimicking realistic process conditions, only the molar concentrations of thetwo desired products are assumed to be measured, that is, yp =[cP cE]T . The reactorProcesses 2021, 9, 901 18 of 24temperature Tr is manipulated, assuming ideal cooling. The kinetic parameters depend onthe reactor temperature via an Arrhenius-type law:ki(Tr) = ki0 exp(−EiTr + 273.15)for i = 1, 2, 3. (62)For the sake of brevity, the system dynamics are not reported here but can be foundin [12]. The reactor has two inputs, namely, the temperature Tr and the flow rate QB. Theprofit to be maximized isp(·) = QrcP pP + QrcE pE −QAcA0 pA −QBcB0 pB, (63)where pP, pE, pA, and pB are the molar prices of products and reactants. The plant parame-ters can be found in [32] and in Table 1.Table 1. William–Otto reactor: Plant parametersParameter Value Unitk10 9.9594× 106 m3/(kmol ·min)k20 8.66124× 109 m3/(kmol ·min)k30 9.9594× 106 m3/(kmol ·min)E1 6666.7 KE2 8333.3 KE3 11,111 KcA0 10 kmol/m3cB0 10 kmol/m3V 2.105 m3QA 112.35 m3/minpA 7.623 $/kmolpB 11.434 $/kmolpP 114.338 $/kmolpE 5.184 $/kmol5.2.2. ModelThe model used for control design comprises only two reactions:A + 2Bk̃1−→ P + E r̃1 = k̃1(Tr)cAc2BA + B + Pk̃2−→ G r̃2 = k̃2(Tr)cAcBcP,(64)for which the kinetic parameters are reported in Table 2.Table 2. Williams–Otto reactor: Model parametersParameter Value Unitk̃10 1.3134× 108 m6/(kmol2 ·min)k̃20 2.586× 1013 m6/(kmol2 ·min)Ẽ1 8077.6 KẼ2 12,438.5 KProcesses 2021, 9, 901 19 of 24We can infer from Equation (64) that they are 5 model states,x =[cA cB cP cE cG]T ,while the plant has 6 states,xp =[cA cB cC cP cE cG]T .In addition, the inputs are bounded as follows:0.18 m3/min ≤ QB ≤ 0.36 m3/min (65)75 °C ≤ Tr ≤ 100 °C. (66)5.2.3. Reactor OptimizationThe sampling time in this example is τ = 2 min, which calls for Mτ = 30 min betweentwo successive modifier updates. In this case, with τst = 35 min, the choice M = 15 is alsoquite appropriate. The performance of the five controllers is depicted in Figure 5, togetherwith the optimal operating point that is unknown to the controllers. Λ-initialization isperformed in the time interval of 30–90 min. The starting point for the model state vector isx0 =[2 2 1.1 1 0.6]T ,and the first measurement from the plant reads yp,0 =[1.1 0.6]T .A behavior similar to that shown in Figure 3 can be observed, namely, (i) all schemesreach plant optimality; (ii) before the initialization phase, the practical schemes eMPC1-4behave alike since the modifier matrix is still zero. Then, from k0τ = 30 to k f τ = 90 min,the two inputs are excited individually and sequentially as described in Section 4.1. Once anonzero modifier matrix has been computed, we see a difference between the schemes thatuse plant-gradient estimation (eMPC1 and eMPC2) and those that estimate the gradientdifferences directly (eMPC3 and eMPC4). In this example, the schemes that rely on plant-gradient estimation do not work well: eMPC1 and eMPC2 fail to reach plant optimality;in addition, eMPC2 converges slowly, while the second input with eMPC1 gets stuck toits upper bound. In contrast, eMPC3 and eMPC4 are able to reach plant optimality. Theseresults indicate that the two schemes based on estimating the gradient differences give thebest performance.In order to check the robustness of these last two schemes, we propose to corrupt themeasurements with white noise, i.e., Plant (1) is modified as follows:x+p = fp(xp, u)yp = hp(xp)+Rvv,(67)where v ∈ Rny is a white noise signal with covariance Rv = 10−3 Iny . Figure 6 showsthe effect of noise on the convergence performance of eMPC3 and eMPC4. It is seen thatlinear regression handles measurement noise better than Broyden’s update since the formeruses measurements stemming from several measurement points and therefore possesses astronger filtering effect. Note that eMPC3 and eMPC4 perform very similarly right afterthe initialization phase when the number of measurements points is the same. As shown inthe top panels of Figure 6, as time advances and more measurements become available toeMPC4, the inputs are able to move much quicker than with eMPC3. Another illustrationof the improved resilience of eMPC4 with respect to measurement noise is shown by theprofit profile in the bottom panel of Figure 6.Processes 2021, 9, 901 20 of 240 100 200 300 400 500 6000.2250.2500.2750.3000.3250.350Input1:QB(m3 /min)0 100 200 300 400 500 60080859095100Input2:T r(°C)0 100 200 300 400 500 600Time (min)−0.10.00.10.2 Profit(€/min)eMPC0 eMPC1 eMPC2 eMPC3 eMPC4 Opt. Eq.Figure 5. Performance of the Williams–Otto reactor with five controllers and no measurement noise:inputs (top and middle) and profit (bottom). The dotted vertical lines depict the time interval of30–90 min used for Λ-initialization.Processes 2021, 9, 901 21 of 240 100 200 300 400 500 6000.1750.2000.2250.2500.2750.3000.3250.350Input1:QB(m3 /min)0 100 200 300 400 500 60077.580.082.585.087.590.092.5Input2:T r(°C)0 100 200 300 400 500 600Time (min)−0.10−0.050.000.050.100.150.20 Profit(€/min)eMPC3 eMPC4 Opt. Eq.Figure 6. Performance of the Williams–Otto reactor with eMPC3 and eMPC4 in the presence ofmeasurement noise: inputs (top and middle) and profit (bottom). The dotted vertical lines depictthe time interval of 30–90 min used for Λ-initialization.5.3. Final ConsiderationsAn interesting result is the improvement in estimation quality when the modifiersare estimated directly rather than computed from the estimated plant gradients and thepredicted model gradients. This is related to the nature of the estimation error. The gradientestimation error encompasses two terms resulting from truncation error and measurementnoise, respectively (see [9] for a more comprehensive discussion). These two error typesare quite different in nature, with the former being systematic and the latter being random.On this basis, one can consider two different ways of estimating the modifiers:1. Estimate the plant gradients from measurements, compute the model gradients“analytically” from the model, and evaluate the modifiers as their differences, as perSection 3.2. This approach is very sensitive to truncation errors, as these errors affectthe estimation of plant gradients but not of model gradients.2. Estimate the plant gradients from measurements, estimate the model gradients fromthe model using the same numerical scheme, and evaluate the modifiers as theirdifferences. This is equivalent to estimating the modifiers directly from measurementsProcesses 2021, 9, 901 22 of 24(see Section 3.3). In this case, the truncation errors tend to cancel out upon computingthe differences between plant and model gradients.6. ConclusionsDifferent offset-free economic model predictive control schemes that combine anaugmented model structure and first-order modifiers on the outputs have been proposedin recent years. These schemes proved to converge asymptotically to plant optimality, evenunder plant–model mismatch. The main caveat of this formulation is the requirement ofperfect knowledge of static plant gradients.This paper has investigated two different techniques to estimate plant gradientsusing steady-state measurements, namely, Broyden’s update and linear regression. Thesetechniques have been adapted and applied to estimate either the plant gradient or themodifiers directly. Consequently, four different approaches have been tested via twoexamples: in the first (single-input) example, all methods give satisfactory results, andalso when the time between modifier updates is reduced to boost convergence speed. Inthe second (multi-input) example, only the approach that estimates the modifiers directlysucceeded in reaching plant optimality. The approach was tested using both Broyden’supdate and linear regression. It was found that the approach that uses linear regression isclearly superior in handling measurement noise. In general, although the most effectiveestimation method should be chosen according to the specific case, it appears from theseresults that estimating the modifiers directly is more effective than estimating the plantgradient alone. Furthermore, in the presence of measurement noise, modifier estimation isbest implemented via linear regression.Note that these findings are not the end of the story, as this investigation was limitedto plant gradient estimation using as many steady-state measurements as possible (M = 15in this study). As mentioned in the introduction, one would like to be able to estimate staticplant gradients using transient data, so as to speed up convergence even more (ideally,M = 1). Hence, a similar type of study to analyze the performance of eMPC in the presenceof plant–model mismatch and the availability of transient measurements is very welcome.Finally, in the present paper, closed-loop stability has been assumed as per Assumption 5.However, the stability of eMPC under plant–model mismatch is still an open issue, whichmay motivate future research.Author Contributions: Conceptualization, D.B. and G.P.; methodology, M.V., F.P., and G.P.; software,F.P. and M.V.; validation, M.V., D.B., and G.P.; investigation, M.V. and F.P.; data curation, M.V. andF.P.; writing—original draft preparation, M.V.; writing—review and editing, M.V., D.B., and G.P.;visualization, M.V.; supervision, G.P.; project administration, G.P. All authors have read and agreedto the published version of the manuscript.Funding: This research received no external funding.Institutional Review Board Statement: Not applicable.Informed Consent Statement: Not applicable.Data Availability Statement: This study does not report any data.Conflicts of Interest: The authors declare no conflict of interest.References1. Rawlings, J.B.; Angeli, D.; Bates, C.N. Fundamentals of economic model predictive control. In Proceedings of the 51st IEEEConference on Decision and Control, Maui, HI, USA, 10–13 December 2012; pp. 3851–3861.2. Morari, M.; Arkun, Y.; Stephanopoulos, G. Studies in the synthesis of control structures for chemical processes: Part I: Formulationof the problem. Process decomposition and the classification of the control tasks. Analysis of the optimizing control structures.AIChE J. 1980, 26, 220–232. [CrossRef]3. Engell, S. Feedback control for optimal process operation. J. Process Control 2007, 17, 203–219. [CrossRef]4. Ellis, M.; Christofides, P.D. On finite-time and infinite-time cost improvement of economic model predictive control for nonlinearsystems. Automatica 2014, 50, 2561 – 2569. [CrossRef]Processes 2021, 9, 901 23 of 245. Pannocchia, G.; Rawlings, J.B. Disturbance models for offset-free model-predictive control. AIChE J. 2003, 49, 426–437. [CrossRef]6. Muske, K.R.; Badgwell, T.A. Disturbance modeling for offset-free linear model predictive control. J. Process Control 2002,12, 617–632. [CrossRef]7. Pannocchia, G. Offset-free tracking MPC: A tutorial review and comparison of different formulations. In Proceedings of theEuropean Control Conference, Linz, Austria, 15–17 July 2015; pp. 527–532.8. Marchetti, A.G.; Chachuat, B.; Bonvin, D. Modifier-adaptation methodology for real-time optimization. Ind. Eng. Chem. Res.2009, 48, 6022–6033. [CrossRef]9. Marchetti, A.G.; Chachuat, B.; Bonvin, D. A dual modifier-adaptation approach for real-time optimization. J. Process Control 2010,20, 1027–1037. [CrossRef]10. Marchetti, A.; François, G.; Faulwasser, T.; Bonvin, D. Modifier adaptation for real-time optimization—Methods and applications.Processes 2016, 4, 55. [CrossRef]11. Vaccari, M.; Pannocchia, G. A Modifier-Adaptation Strategy towards Offset-Free Economic MPC. Processes 2016, 5, 2. [CrossRef]12. Faulwasser, T.; Pannocchia, G. Towards a unifying framework blending RTO and economic MPC. Ind. Eng. Chem. Res. 2019,58, 13583–13598. [CrossRef]13. Vergara-Diertrich, J.; Ferramosca, A.; Mirasierra, V.; Normey-Rico, J.E.; Limon, D. A Modifier-Adaptation Approach to theOne-Layer Economic MPC. IFAC-PapersOnLine 2020, 53, 6957–6962. [CrossRef]14. Papasavvas, A.; de Avila Ferreira, T.; Marchetti, A.G.; Bonvin, D. Analysis of output modifier adaptation for real-time optimization.Comput. Chem. Eng. 2019, 121, 285–293. [CrossRef]15. Marchetti, A.G.; Faulwasser, T.; Bonvin, D. A feasible-side globally convergent modifier-adaptation scheme. J. Process Control2017, 54, 38–46. [CrossRef]16. Schneider, R.; Milosavljevic, P.; Bonvin, D. Accelerated and adaptive modifier-adaptation schemes for the real-time optimizationof uncertain systems. J. Process Control 2019, 83, 129–135. [CrossRef]17. Mirasierra, V.; Vergara-Diertrich, J.; Limon, D. Real-Time Optimization of Periodic Systems: A Modifier-Adaptation Approach.IFAC-PapersOnLine 2020, 53, 1690–1695. [CrossRef]18. Papasavvas, A.; Francois, G. Internal Modifier Adaptation for the Optimization of Large-Scale Plants with Inaccurate Models.Ind. Eng. Chem. Res. 2019, 58, 13568–13582. [CrossRef]19. Gao, W.; Wenzel, S.; Engell, S. Modifier adaptation with quadratic approximation in iterative optimizing control. In Proceedingsof the European Control Conference, Linz, Austria, 15–17 July 2015; pp. 2527–2532.20. Costello, S.; François, G.; Bonvin, D. A Directional Modifier-Adaptation Algorithm for Real-Time Optimization. J. Process Control2016, 39, 64–76. [CrossRef]21. Pannocchia, G. An economic MPC formulation with offset-free asymptotic performance. IFAC-PapersOnLine 2018, 51, 393–398.[CrossRef]22. François, G.; Bonvin, D. Use of transient measurements for the optimization of steady-state performance via modifier adaptation.Ind. Eng. Chem. Res. 2013, 53, 5148–5159. [CrossRef]23. de Avila Ferreira, T.; François, G.; Marchetti, A.G.; Bonvin, D. Use of transient measurements for static real-time optimization.IFAC-PapersOnLine 2017, 50, 5737–5742. [CrossRef]24. Hernández, R.; Engell, S. Economics Optimizing Control with Model Mismatch Based on Modifier Adaptation. IFAC-PapersOnLine2019, 52, 46–51. [CrossRef]25. Vaccari, M.; Pannocchia, G. Implementation of an economic MPC with robustly optimal steady-state behavior. IFAC-PapersOnLine2018, 51, 92–97. [CrossRef]26. Singhal, M.; Marchetti, A.G.; Faulwasser, T.; Bonvin, D. Active directional modifier adaptation for real-time optimization. Comput.Chem. Eng. 2018, 115, 246–261. [CrossRef]27. Marchetti, A.; de Avila Ferreira, T.; Costello, S.; Bonvin, D. Modifier adaptation as a feedback control scheme. Ind. Eng. Chem. Res.2020, 59, 2261–2274. [CrossRef]28. Singhal, M.; Marchetti, A.G.; Faulwasser, T.; Bonvin, D. A note on efficient computation of privileged directions in modifieradaptation. Comput. Chem. Eng. 2020, 132, 106524. [CrossRef]29. Jeong, D.H.; Lee, C.J.; Lee, J.M. Experimental gradient estimation of multivariable systems with correlation by various regressionmethods and its application to modifier adaptation. J. Process Control 2018, 70, 65–79. [CrossRef]30. Navia, D.; Briceño, L.; Gutiérrez, G.; De Prada, C. Modifier-Adaptation Methodology for Real-Time Optimization Reformulatedas a Nested Optimization Problem. Ind. Eng. Chem. Res. 2015, 54, 12054–12071. [CrossRef]31. Oliveira-Silva, E.; de Prada, C.; Navia, D. Dynamic optimization integrating modifier adaptation using transient measurements.Comput. Chem. Eng. 2021, 149, 107282. [CrossRef]32. Vaccari, M.; Pelagagge, F.; Dominique, B.; Pannocchia, G. Estimation technique for offset-free economic MPC based on modifieradaptation. IFAC-PapersOnLine 2020, 53, 11251–11256. [CrossRef]33. Maeder, U.; Borrelli, F.; Morari, M. Linear offset-free model predictive control. Automatica 2009, 45, 2214–2222. [CrossRef]34. Morari, M.; Maeder, U. Nonlinear offset-free model predictive control. Automatica 2012, 48, 2059–2067. [CrossRef]35. Pannocchia, G.; Gabiccini, M.; Artoni, A. Offset-free MPC explained: Novelties, subtleties, and applications. IFAC-PapersOnLine2015, 48, 342–351. [CrossRef]Processes 2021, 9, 901 24 of 2436. Rawlings, J.B. and Allan, D.A. Moving horizon estimation. Encycl. Syst. Control 2020, 1–7. doi: 10.1007/978-1-4471-5102-9_4-2.[CrossRef]37. Angeli, D.; Amrit, R.; Rawlings, J.B. On average performance and stability of economic model predictive control. IEEE Trans.Autom. Control 2012, 57, 1615–1626. [CrossRef]38. Vaccari, M.; Pannocchia, G. A performance monitoring algorithm for sustained optimal operation with economic MPC. InProceedings of the 2019 18th European Control Conference (ECC), Naples, Italy, 25–28 June 2019; pp. 3353–3358.39. Roberts, P.D. Broyden derivative approximation in ISOPE optimising and optimal control algorithms. In Proceedings of the 11thIFAC Workshop on Control Applications of Optimisation, Saint Petersburg, Russia, 3–6 July 2000; pp. 283–288.40. Rodger, E.A.; Chachuat, B. Design methodology of modifier adaptation for on-line optimization of uncertain processes. InProceedings of the IFAC World Congress, Milan, Italy, 28 August–2 September 2011; pp. 4113–4118.41. Dennis, J.E., Jr.; Schnabel, R.B. Numerical Methods for Unconstrained Optimization and Nonlinear Equations; SIAM: Philadelphia, PA,USA, 1996; Volume 16.42. Kelley, C.T. Iterative Methods for Optimization; SIAM: Philadelphia, PA, USA, 1999.43. Marchetti, A.G. A new dual modifier-adaptation approach for iterative process optimization with inaccurate models. Comput.Chem. Eng. 2013, 59, 89–100. [CrossRef]44. Williams, T.J.; Otto, R.E. A generalized chemical processing model for the investigation of computer control. Trans. Am. Inst.Electr. Eng. Part I Commun. Electron. 1960, 79, 458–473. [CrossRef]